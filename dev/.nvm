#!/usr/bin/env bash

# setup nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# autoload nvm when .nvmrc exists
autoload -U add-zsh-hook
load-nvmrc() {
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# init typescript project
init-ts() {
  npm init -y
  echo node_modules >> .gitignore
  echo package-lock.json >> .gitignore

  npm install -D typescript @tsconfig/node18

  npm install -D jest @types/jest ts-jest
  ./node_modules/.bin/ts-jest config:init
  sed -i '' 's/"echo \\\"Error\: no test specified\\\" .*/"jest",/' package.json
  sed -i '' -e '/"test".*/a\'$'\n\    ''"test:watch": "jest --watchAll"' package.json

  git init
  git add .
  git commit -m "initial commit"
}